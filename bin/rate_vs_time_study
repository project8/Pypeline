#!/usr/bin/python

from __future__ import print_function

import pypeline
import subprocess
import json
import sys
import time

stat_file_name = '/tmp/pypeline_script_count.json'
if not os.path.isfile(stat_file_name):
    f = open(stat_file_name, 'w')
    json.dump({'sequence': 0})
    f.close()
sequence = json.load(open(stat_file_name))['sequence']
frequencies = [520, 1060]

def full_spectrum(config):
    '''
    '''
    lo_pype = pypeline.DripInterface(config.pop('lo_pype'))
    trap_pype = pypeline.DripInterface(config.pop('trap_pype'))
    file_prefix = config.pop('data_prefix')
    filename = file_prefix + 'lo_{:d}MHz_trap_{:s}.egg'
    description = "'lo':{:d}, 'trap_state':{:s}"
    mantis_kwargs.update(config)
    delay = -1 
    while True:
        delay += 1
        for freq in frequencies:
            print('doing a frequency:', freq, 'in sequence', sequence)
            if set_lo = lo_pype.Set("lo_cw_freq", freq).Result(orError=False) is None:
                break
            #trap off
            if trap_off = trap_pype.Set("cell_heater", "OFF").Result(orError=False) is None:
                break
            mantis_kwargs.update({"output":filename.format(freq, 'off'),
                                  "description":description.format(freq, 'off')})
            lo_pype.RunMantis(**mantis_kwargs).Wait(timeout=60)
            #trap on
            if trap_on = trap_pype.Set("cell_heater", "ON").Result(orError=False) is None:
                break
            mantis_kwargs.update({"output":filename.format(freq, 'on'),
                                  "description":description.format(freq, 'on')})
            lo_pype.RunMantis(**mantis_kwargs).Wait(timeout=60)
            #trap off for sleep
            if trap_off = trap_pype.Set("cell_heater", "OFF").Result(orError=False) is None:
                break
        sequence += 1
        json.dump({'sequence':sequence}, open(stat_file_name, 'w'))
        time.sleep(280)

if __name__ == "__main__":
    if len(sys.argv) == 2:
        config = open(sys.argv[1])
        conf_dict = json.load(config)
        full_spectrum(conf_dict)
    else:
        print("usage: $ ./full_spectrum.py /path/to/config.json")
