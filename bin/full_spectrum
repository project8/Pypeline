#!/usr/bin/python

from __future__ import print_function

import pypeline
import subprocess
import json
import sys

frequencies = range(400, 1601, 10)

def full_spectrum(config):
    '''
    '''
    lo_pype = pypeline.DripInterface(config.pop('lo_pype'))
    trap_pype = pypeline.DripInterface(config.pop('trap_pype'))
    file_prefix = config.pop('data_prefix')
    mantis_kwargs = {"description": "full_spectrum, automatic run"}
    mantis_kwargs.update(config)
    for n,freq in enumerate(frequencies):
        print('doing a frequency: ', freq)
        #trap off
        set_lo = lo_pype.Set("lo_cw_freq", freq).Wait()
        trap_off = trap_pype.Set("trap_output", "OFF").Wait()
        trap_off = trap_pype.Set("cell_heater_output", "OFF").Wait()
        mantis_kwargs.update({"output":file_prefix+str(n)+'_trap_off.egg'})
        lo_pype.RunMantis(**mantis_kwargs)
        #trap on
        trap_on = trap_pype.Set("trap_output", "ON").Wait()
        trap_on = trap_pype.Set("cell_heater_output", "ON").Wait()
        mantis_kwargs.update({"output":file_prefix+str(n)+'_trap_on.egg'})
        lo_pype.RunMantis(**mantis_kwargs)
        trap_off = trap_pype.Set("trap_output", "OFF").Wait()
        trap_off = trap_pype.Set("cell_heater_output", "OFF").Wait()

if __name__ == "__main__":
    if len(sys.argv) == 2:
        config = open(sys.argv[1])
        conf_dict = json.load(config)
        full_spectrum(conf_dict)
    else:
        print("usage: $ ./full_spectrum.py /path/to/config.json")
